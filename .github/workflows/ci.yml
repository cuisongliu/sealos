name: CI

env:
  # Common versions
  GO_VERSION: "1.18"

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "!.github/*.yml"
  pull_request:
    branches: ["*"]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "!.github/*.yml"

jobs:
  check-license:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check License
        run: make verify-license

  resolve-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Resolve Modules
        id: set-matrix
        run: sh ./scripts/resolve-modules.sh

  golangci-lint:
    needs: [check-license, resolve-modules]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.resolve-modules.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.46.2
          working-directory: ${{ matrix.workdir }}
          args: "--out-${NO_FUTURE}format colored-line-number"

  coverage:
    needs: [check-license]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Coverage
        run: make coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3

  build:
    needs: [golangci-lint, coverage]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [sealos, sealctl, lvscare, image-cri-shim]
        arch: [arm64, amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Dependencies
        if: ${{ matrix.binary == 'sealos' && matrix.arch == 'arm64' }}
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make build BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Compress Binaries
        run: |
          make compress BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Save binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}-${{ matrix.arch }}
          path: bin/linux_${{ matrix.arch}}/${{ matrix.binary }}

  docker:
    needs: [ build ]
    runs-on: ubuntu-latest
    services:
      registry:
        credentials:
          username: admin
          password: passw0rd
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download run lvscare artifacts
        uses: actions/download-artifact@v3
        with:
          name: lvscare-${{ matrix.arch }}
          path: docker/lvscare/lvscare

      - name: Download run sealctl artifacts
        uses: actions/download-artifact@v3
        with:
          name: sealctl-${{ matrix.arch }}
          path: docker/patch/sealctl

      - name: Download run image-cri-shim artifacts
        uses: actions/download-artifact@v3
        with:
          name: image-cri-shim-${{ matrix.arch }}
          path: docker/patch/image-cri-shim

      - name: Download run sealos artifacts
        uses: actions/download-artifact@v3
        with:
          name: sealos-${{ matrix.arch }}
          path: docker/sealos/sealos

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: localhost:5000
          username: admin
          password: passw0rd

      - name: Build Push lvscare image
        uses: docker/build-push-action@v3
        with:
          context: docker/lvscare
          file: docker/lvscare/Dockerfile
          platforms: linux/${{ matrix.arch}}
          push: true
          tags: localhost:5000/lvscare:temp-${{ matrix.arch}}

      - name: Save docker
        env:
          REGISTRY_USERNAME: admin
          REGISTRY_PASSWORD: passw0rd
        run: |
#          docker save -o lvscare-${{ matrix.arch}}.tar localhost:5000/lvscare:temp-${{ matrix.arch}}
          wget https://github.com/labring/sealos/releases/download/v4.0.0/sealos_4.0.0_linux_amd64.tar.gz
          tar -zxvf sealos_4.0.0_linux_amd64.tar.gz sealos &&  chmod +x sealos
          ipvsImage=localhost:5000/lvscare:temp-${{ matrix.arch}}
          echo "$ipvsImage" > docker/patch/images/shim/lvscareImage
          sed -i "s#__lvscare__#$ipvsImage#g" docker/patch/Dockerfile
          sudo rm -rf /usr/share/containers/containers.conf
          sudo ./sealos login localhost:5000  -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD
          sudo ./sealos build -t docker.io/labring/patch:new  --platform linux/${{ matrix.arch}} -f docker/patch/Dockerfile docker/patch
          sudo ./sealos images
